/* boolean connectESP8266_toInternet(String wifiNetworkName,String wifiNetworkPassword, int port);  Set your home wifi network SSID and PASSWORD  (Put this function on start of void setup)
 *
 * boolean createLocalESP8266_wifiServer(String wifiNetworkName,String wifiNetworkPassword, int port, int mode); Use this function to create an ESP8266 wifi local network
 *                                                                   set port to 80 
 *                                                                   set mode=2 to use ESP8266 only as access point 
 *                                                                   set mode=3 to use ESP8266 as access point and internet station.
 *
 *  bool esp8266_setIP(byte a1, byte a2, byte a3, byte a4);           set ESP8266 local IP. Use this function after connectESP8266_toInternet function 
 *
 * ========= Virtuino general methods  
 *  void vDigitalMemoryWrite(int digitalMemoryIndex, int value)       write a value to a Virtuino digital memory   (digitalMemoryIndex=0..31, value range = 0 or 1)
 *  int  vDigitalMemoryRead(int digitalMemoryIndex)                   read  the value of a Virtuino digital memory (digitalMemoryIndex=0..31, returned value range = 0 or 1)
 *  void vMemoryWrite(int memoryIndex, float value);                  write a value to Virtuino memory             (memoryIndex=0..31, value range as float value)
 *  float vMemoryRead(int memoryIndex);                               read a value of  Virtuino memory             (memoryIndex=0..31, returned a float value
 *  run();                                                            neccesary command to communicate with Virtuino android app  (on start of void loop)
 *  int getPinValue(int pin);                                         read the value of a Pin. Usefull to read the value of a PWM pin
 *  void vDelay(long milliseconds);                                   Pauses the program (without block communication) for the amount of time (in miliseconds) specified as parameter
 *  void vDelay(long milliseconds);                                   Pauses the program (without block communication) for the amount of time (in miliseconds) specified as parameter
 *  void clearTextBuffer();                                           Clear the text received text buffer
 *  int textAvailable();                                              Check if there is text in the received buffer
 *  String getText(byte ID);                                          Read the text from Virtuino app
 * void sendText(byte ID, String text);                               Send text to Virtuino app  
 */
 
#include "VirtuinoEsp8266_WebServer.h"
#include <OneWire.h>
#include <DallasTemperature.h>

int temp_sensor1 = 5; //- pinovi na koi sa povrzani
//int temp_sensor2 = 6;

OneWire oneWirePin1(temp_sensor1);
//OneWire oneWirePin2(temp_sensor2);

DallasTemperature sensor1(&oneWirePin1);
//DallasTemperature sensor2(&oneWirePin2);

VirtuinoEsp8266_WebServer virtuino(Serial2,115200);    

// Connect the  ESP01 module to Arduino Mega - Due Serial1 port as the plan below
//  http://iliaslamprou.mysch.gr/virtuino/esp8266_arduino_mega_connection_plan.png

// Arduino Mega settings -> Open VirtuinoEsp8266_WebServer file on the virtuino library folder ->  disable the line: #define ESP8266_USE_SOFTWARE_SERIAL 

// Arduino Due settings  -> 1.Open VirtuinoBluetooth.h on the virtuino library folder ->  disable the line: #define BLUETOOTH_USE_SOFTWARE_SERIAL 
//                       -> 2.Open VirtuinoEsp8266_WebServer file on the virtuino library folder ->  disable the line: #define ESP8266_USE_SOFTWARE_SERIAL 
                               

void setup() 
{
  virtuino.DEBUG=true;                                            // set this value TRUE to enable the serial monitor status.It is neccesary to get your esp8266 local ip
  Serial.begin(9600);  
  // Enable this line only if DEBUG=true
  virtuino.createLocalESP8266_wifiServer("ESP","ESPmodulwifi",80,2);
  //virtuino.connectESP8266_toInternet("username","password",8000);  // Set your home wifi router SSID and PASSWORD. ESP8266 will connect to Internet. Port=80
  //virtuino.esp8266_setIP(192,168,0,100);                                          // Set a local ip. Forward port 80 to this IP on your router

  //virtuino.createLocalESP8266_wifiServer("ESP8266 NETWORK NAME","PASSWORD",80,2);   //Enable this line to create a wifi local netrork using ESP8266 as access point
                                                                                      //Do not use less than eight characters for the password. Port=80                                                                                   //Default access point ESP8266 ip=192.168.4.1. 
 
  virtuino.password="1234";                                     // Set a password to your web server for more protection 
                                                                // avoid special characters like ! $ = @ # % & * on your password. Use only numbers or text characters                         
//------ enter your setup code below

    sensor1.begin(); //start sensor 1
//    sensor2.begin();         
}

void loop(){
   virtuino.run();           //  necessary command to communicate with Virtuino android app
   
    //------ enter your loop code below here
    //------ avoid to use delay() function in your code. Use the command virtuino.vDelay() instead of delay()

    // your code .....
    sensor1.requestTemperatures();  // Send the command to get temperatures
//    sensor2.requestTemperatures();
    float t1 = sensor1.getTempCByIndex(0);
//    float t2 = sensor2.getTempCByIndex(0);
   // Serial.print("Temperature on Sensor 1 is: ");
    //Serial.print(sensor1.getTempCByIndex(0)); // Why "byIndex"? You can have more than one IC on the same bus. 0 refers to the first IC on the wire
    //Serial.print("  ");
    //Serial.print("Sensor 2 is: ");
    //Serial.print(sensor2.getTempCByIndex(0)); 
    //Serial.println();
    virtuino.vMemoryWrite(0,t1);
//    virtuino.vMemoryWrite(1,t2);
    virtuino.vDelay(2000); //Update value every 2 sec

   
   
        
     //----- end of your code
 }

